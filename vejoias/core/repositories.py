from typing import List, Protocol, Optional, Dict, Any
# Assumimos que as Entidades Joia, Pedido, Usuario, TransacaoPagamento, Endereco e Carrinho já estão definidas em vejoias.core.entities
from vejoias.core.entities import Joia, Pedido, Usuario, TransacaoPagamento, Endereco, Carrinho 

# ===============================================
# REPOSITÓRIOS
# ===============================================

class IRepositorioJoias(Protocol):
    """Protocolo para operações de persistência da entidade Joia (Produto)."""
    def buscar_por_id(self, joia_id: str) -> Optional[Joia]: ...
    def buscar_todos(self) -> List[Joia]: ...
    def buscar_por_sku(self, sku: str) -> Optional[Joia]: ...
    def salvar(self, joia: Joia) -> Joia: ...
    def atualizar_estoque(self, joia_id: str, quantidade_removida: int) -> bool: ...
    def buscar_por_criterios(
        self, 
        em_estoque: bool, 
        busca: Optional[str] = None, 
        categoria_slug: Optional[str] = None
    ) -> List[Joia]: ...


class IRepositorioCarrinhos(Protocol):
    """Protocolo para operações de persistência da entidade Carrinho."""
    def buscar_por_usuario(self, usuario: Usuario) -> Carrinho: ...
    def salvar(self, carrinho: Carrinho) -> Carrinho: ...
    def limpar_carrinho(self, usuario: Usuario) -> None: ...


class IRepositorioPedidos(Protocol):
    """Protocolo para operações de persistência da entidade Pedido."""
    def buscar_por_id(self, pedido_id: str) -> Optional[Pedido]: ...
    def buscar_por_usuario(self, usuario_id: str) -> List[Pedido]: ...
    def salvar(self, pedido: Pedido) -> Pedido: ...
    def atualizar_status(self, pedido_id: str, novo_status: str) -> bool: ...
    def buscar_por_transacao_id(self, transacao_id: str) -> Optional[Pedido]: ...


class IRepositorioUsuarios(Protocol):
    """Protocolo para operações de persistência da entidade Usuario."""
    def buscar_por_id(self, usuario_id: str) -> Optional[Usuario]: ...
    def buscar_por_email(self, email: str) -> Optional[Usuario]: ...
    def salvar(self, usuario: Usuario) -> Usuario: ...
    
class IRepositorioTransacoes(Protocol):
    """Protocolo para operações de persistência da entidade TransacaoPagamento."""
    def buscar_por_id(self, transacao_id: str) -> Optional[TransacaoPagamento]: ...
    def buscar_por_referencia_externa(self, ref_externa: str) -> Optional[TransacaoPagamento]: ...
    def salvar(self, transacao: TransacaoPagamento) -> TransacaoPagamento: ...
    def atualizar_status(self, transacao_id: str, novo_status: str) -> bool: ...

class IRepositorioEnderecos(Protocol):
    """Protocolo para operações de persistência da entidade Endereco."""
    def buscar_por_id(self, endereco_id: str) -> Optional[Endereco]: ...
    def buscar_por_usuario(self, usuario_id: str) -> List[Endereco]: ...
    def salvar(self, endereco: Endereco) -> Endereco: ...

# ===============================================
# GATEWAYS (APIs Externas)
# ===============================================

class IPagamentoGateway(Protocol):
    """Protocolo para interação com serviços externos de pagamento (Ex: Pagar.me, Stripe)."""
    def processar_pagamento(self, pedido: Pedido, metodo: str, dados: Dict[str, Any]) -> TransacaoPagamento: ...
    def verificar_status(self, transacao_id: str) -> TransacaoPagamento: ...
