services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles  # Volume para arquivos estáticos
      - media_volume:/app/media         # Volume para uploads de mídia
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=vejoias.settings
      - POSTGRES_HOST=db
      - REDIS_HOST=redis
    restart: always
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        gunicorn vejoias.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4"

  db:
    # Usa a imagem oficial do PostgreSQL no Docker Hub
    image: postgres:15
    # Define as variáveis de ambiente para o banco de dados
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # Mapeia a porta padrão do PostgreSQL (5432)
    ports:
      - "5432:5432"
    # Persiste os dados do banco em um volume, evitando a perda de dados ao parar o contêiner
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    healthcheck:
      # Verifica se o PostgreSQL está pronto para conexões
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    command: >
      redis-server --port 6379 --appendonly yes
    volumes:
      - redis_data:/data
    restart: always
    ports:
      - 6379:6379

  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.1.1
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - .env
    volumes:
      - evolution_instances:/evolution/instances
    environment:
      - EVOLUTION_API_KEY=${EVOLUTION_API_KEY}
      - EVOLUTION_INSTANCE_NAME=${EVOLUTION_INSTANCE_NAME}
      - EVOLUTION_API_URL=${EVOLUTION_API_URL}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      

# Define os volumes que serão usados pelos serviços
volumes:
  postgres_data:
  redis_data:
  evolution_instances:
  static_volume:
  media_volume:
